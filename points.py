import xml.etree.ElementTree as ET

def stripNamespace(filename):
    '''
    Returns ET root from from filename with namespace removed'''
    it = ET.iterparse(filename)
    for _, el in it:
        if '}' in el.tag:
            el.tag = el.tag.split('}', 1)[1]  # strip all namespaces
    return it.root

def getrposlist(race, racenum):
    '''
    Returns list of dicts containing runner name and position
    race is an ClassResult element from IOF results file'''
    rposlist = []
    rpos = -1
    for i, person in enumerate(race.iter('PersonResult')):
        namestr = ""
        for Given in person.iter("Given"):
            try:
                namestr = namestr + Given.text + " "
            except:
                break
        for Family in person.iter("Family"):
            try:
                namestr = namestr + Family.text
            except:
                break
        namestr = namestr.upper().strip()

        try:
            if person.find('Result/Status').text == 'OK':
                rpos = int(person.find('Result/Time').text)
            rposlist.append({'name': namestr, 'rpos': rpos, 'racenum': racenum})
        except:
            namestr = "mud"
        rpos = -1
    return rposlist

def get_positions(filelist):
    '''
    Reads a list of IOF XML results files (filelist) and records the
    results into rposlistlist:

    rposlistslist
    |-rposlist (for race 1)
    | |-runner 1 - dict containing runner name, race, finish position
    | |-runner 2 - "
    | |-etc.
    |-rposlist (for race 2)
    |-etc.

    filelist must contain only IOFv3 XML files

    '''
    rposlistlist = []
    racenumlist = ['name']
    for filename in filelist:
        root = stripNamespace(filename)
        event = filename.split('_')[1].split('.')[0]

        for race in root.findall('./ClassResult'):
            racename = race.find('Class/Name').text
            racenum = event + ' ' + racename
            racenumlist.append(racenum)
            rposlistlist.append(getrposlist(race, racenum))
    return rposlistlist, racenumlist

def from_list(list, rposlistlist):
    '''
    Takes rposlistlist generated by points.get_positions and
    separates
    Each dict in the rpll must have a name entry
    '''

    rpll = []
    for race in rposlistlist:
        rpl = []
        for runner in race:
            runnername = str(runner['name'])
            if runnername in list:
                rpl.append(runner)
        rpll.append(rpl)

    return rpll


def get_points(rposlistlist):
    '''
    Takes the rpll and produces namelist:

    namelist
    |-runner 1 - dict containing runner names, and point value entry for each
    |            race he/she has done
    |-runner 2
    |-etc.

    Points are awarded as shown in pointslist. If runner mispunched, rpos
    will equal None and the runner will be awarded 10 points.
    '''

    # This is an awkward way of building the list of point values
    # to awards to each runner
    # 1st value in the list is points for 1st place and so on
    pointslist = [100, 90, 81, 73, 66, 60, 55, 51, 47, 44, 41,
                  39, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28,
                  27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16]
    pointslist2 = [15] * 65
    pointslist.extend(pointslist2)
    pointslist.append(5)
    namelist = [{'name': 'wombat'}]

    for race in rposlistlist:
        rpointslist = list(pointslist)
        for runner in sorted(race, key = lambda i: i['rpos']):
            #print(runner)
            entry = next((item for item in namelist if
                          item['name'] == runner['name']), None)
            if entry:
                entry[runner['racenum']] = rpointslist.pop(0)
            else:
                entry = {'name': runner['name'],
                         runner['racenum']: rpointslist.pop(0)}
                namelist.append(entry)
            if entry and runner['rpos'] == -1:
                entry[runner['racenum']] = 10
    return namelist
